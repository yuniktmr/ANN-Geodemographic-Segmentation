# -*- coding: utf-8 -*-
"""ANN_Geodemographic_Segmentation_BankingBasic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBCrF7KYnjYjbZWqSUM1-9nkLoPi6ETK

Import the libraries for pre-processing
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf

tf.__version__

"""Data preprocessing"""

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:,3:-1].values
Y = dataset.iloc[:,-1].values
print(X)

"""Impute missing data"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values = np.nan, strategy='mean')
imputer.fit(X[:,1:3])
X[:,1:3] = imputer.transform(X[:,1:3])

"""Encode Categorical Data"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:,2] = le.fit_transform(X[:,2])
print(X)

"""One hot encoding non-related data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""Split the data into training and test data set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size = 0.2, random_state=0)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

"""**Build the ANN**

Initialize the ANN
"""

ann = tf.keras.models.Sequential()

"""Add input layer and first hidden layer"""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

"""Add second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6,activation='relu'))

"""Add Output Layer"""

ann.add(tf.keras.layers.Dense(units=1,activation='sigmoid'))

"""**Training the ANN**

Compile the ANN
"""

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""Traning the ANN on the training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""Inferences and Evaluation"""

print(ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 6, 2, 1, 1, 50 ]])) > 0.5)

"""Predicting the test results"""

y_pred = ann.predict(X_test)
#print(y_pred)
y_pred = y_pred > 0.5
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)